datasource client {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

// User model: ユーザー情報の管理
model User {
    id           String   @id @default(uuid())
    email        String   @unique
    username     String
    passwordHash String
    abaterUrl    String?
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    ownedProjects  Project[]       @relation("ProjectOwner")
    projectMembers ProjectMember[]
    assignedTasks  Task[]          @relation("TaskAssignee")
    createdTasks   Task[]          @relation("TaskCreator")
    comments       Comment[]
    attachments    Attachment[]
    taskActivities TaskActivity[]
    refreshTokens  RefreshToken[]
}

// Project model: プロジェクト管理
model Project {
    id          String   @id @default(uuid())
    name        String
    description String?
    color       String   @default("#d1ffd1")
    ownerId     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    // Relations
    owner        User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    members      ProjectMember[]
    tasks        Task[]
    taskStatuses TaskStatus[]
    tags         Tag[]
}

// ProjectMember model: プロジェクトメンバー管理
model ProjectMember {
    id        String            @id @default(uuid())
    projectId String
    userId    String
    role      ProjectMemberRole @default(member)
    joinedAt  DateTime          @default(now())

    // Relations
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([projectId, userId])
}

enum ProjectMemberRole {
    owner
    admin
    member
    viewer
}

// TaskStatus model: タスクステータス管理
model TaskStatus {
    id        String   @id @default(uuid())
    projectId String
    name      String
    color     String   @default("#d1ffd1")
    position  Int      @default(0)
    isDefault Boolean  @default(false)
    createdAt DateTime @default(now())

    // Relations
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    tasks   Task[]

    @@unique([projectId, name])
}

// TaskPriority model: タスク優先度管理
model TaskPriority {
    id    String @id @default(uuid())
    name  String @unique
    level Int
    color String

    // Relations
    tasks Task[]
}

// Task model: タスク情報管理
model Task {
    id             String    @id @default(uuid())
    title          String
    description    String?
    projectId      String
    assigneeId     String?
    creatorId      String?
    statusId       String?
    priorityId     String?
    parentTaskId   String?
    dueDate        DateTime?
    estimatedHours Float?
    actualHours    Float?
    completionRate Int       @default(0)
    isArchived     Boolean   @default(false)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    // Relations
    project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    assignee    User?          @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
    creator     User?          @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: SetNull)
    status      TaskStatus?    @relation(fields: [statusId], references: [id], onDelete: Cascade)
    priority    TaskPriority?  @relation(fields: [priorityId], references: [id], onDelete: Cascade)
    parentTask  Task?          @relation("TasksSubTask", fields: [parentTaskId], references: [id], onDelete: Cascade)
    subTasks    Task[]         @relation("TasksSubTask")
    comments    Comment[]
    attachments Attachment[]
    activities  TaskActivity[]
    tags        Tag[]          @relation("TaskTags")
}

// Tag model: タグ情報管理
model Tag {
    id        String   @id @default(uuid())
    name      String
    color     String   @default("#d1ffd1")
    projectId String
    createdAt DateTime @default(now())

    // Relations
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    tasks   Task[]  @relation("TaskTags")
}

model Comment {
    id        String   @id @default(uuid())
    taskId    String
    userId    String
    content   String
    isEdited  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Attachment {
    id               String   @id @default(uuid())
    taskId           String
    userId           String
    filename         String
    originalFilename String
    fileSize         BigInt
    mimeType         String?
    fileUrl          String
    createdAt        DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskActivity {
    id         String   @id @default(uuid())
    taskId     String
    userId     String
    actionType String
    oldValue   String?
    newValue   String?
    fieldName  String?
    createdAt  DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model RefreshToken {
    id        String   @id @default(uuid())
    userId    String
    tokenHash String
    expiresAt DateTime
    createdAt DateTime @default(now())
    isRevoked Boolean  @default(false)

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
